# -*- coding: utf-8 -*-

"""
    marvelcomicslib.controllers.creators_controller

    This file was automatically generated by APIMATIC BETA v2.0 on 07/21/2016
"""

from marvelcomicslib.controllers.base_controller import *

from marvelcomicslib.models.creator_data_wrapper import CreatorDataWrapper
from marvelcomicslib.models.creator import Creator


class CreatorsController(BaseController):

    """A Controller to access Endpoints in the marvelcomicslib API."""

    def __init__(self, http_client = None, http_call_back = None):
        """Constructor which allows a different HTTP client for this controller."""
        BaseController.__init__(self, http_client, http_call_back)

    def get_creator_collection_by_comic_id(self,
                                           comic_id,
                                           comics = None,
                                           first_name = None,
                                           first_name_starts_with = None,
                                           last_name = None,
                                           last_name_starts_with = None,
                                           limit = None,
                                           middle_name = None,
                                           middle_name_starts_with = None,
                                           modified_since = None,
                                           name_starts_with = None,
                                           offset = None,
                                           order_by = "lastName",
                                           series = None,
                                           stories = None,
                                           suffix = None):
        """Does a GET request to /v1/public/comics/{comicId}/creators.

        Fetches lists of creators filtered by a comic id.

        Args:
            comic_id (string): The comic id.
            comics (string, optional): Return only creators who worked on in
                the specified comics (accepts a comma-separated list of ids).
            first_name (string, optional): Filter by creator first name (e.g.
                brian).
            first_name_starts_with (string, optional): Filter by creator first
                names that match critera (e.g. B, St L).
            last_name (string, optional): Filter by creator last name (e.g.
                Bendis).
            last_name_starts_with (string, optional): Filter by creator last
                names that match critera (e.g. Ben).
            limit (string, optional): Limit the result set to the specified
                number of resources.
            middle_name (string, optional): Filter by creator middle name
                (e.g. Michael).
            middle_name_starts_with (string, optional): Filter by creator
                middle names that match critera (e.g. Mi).
            modified_since (string, optional): Return only creators which have
                been modified since the specified date.
            name_starts_with (string, optional): Filter by creator names that
                match critera (e.g. B, St L).
            offset (string, optional): Skip the specified number of resources
                in the result set.
            order_by (string, optional): Order the result set by a field or
                fields. Add a "-" to the value sort in descending order.
                Multiple values are given priority in the order in which they
                are passed. (Acceptable values are: "lastName", "firstName",
                "middleName", "suffix", "modified", "-lastName", "-firstName",
                "-middleName", "-suffix", "-modified")
            series (string, optional): Return only creators who worked on the
                specified series (accepts a comma-separated list of ids).
            stories (string, optional): Return only creators who worked on the
                specified stories (accepts a comma-separated list of ids).
            suffix (string, optional): Filter by suffix or honorific (e.g.
                Jr., Sr.).

        Returns:
            CreatorDataWrapper: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += "/v1/public/comics/{comicId}/creators"

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            "comicId": comic_id
        })

        # Process optional query parameters
        _query_parameters = {
            "comics": comics,
            "firstName": first_name,
            "firstNameStartsWith": first_name_starts_with,
            "lastName": last_name,
            "lastNameStartsWith": last_name_starts_with,
            "limit": limit,
            "middleName": middle_name,
            "middleNameStartsWith": middle_name_starts_with,
            "modifiedSince": modified_since,
            "nameStartsWith": name_starts_with,
            "offset": offset,
            "orderBy": order_by,
            "series": series,
            "stories": stories,
            "suffix": suffix,
            "apikey": Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "referer": Configuration.referer
        }

        # Prepare the API call.
        _http_request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_http_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_http_request)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_response)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 409:
            raise APIException("Limit greater than 100.", 409, _response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(_response)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, CreatorDataWrapper.from_dictionary)



    def get_creator_collection(self,
                               comics = None,
                               events = None,
                               first_name = None,
                               first_name_starts_with = None,
                               last_name = None,
                               last_name_starts_with = None,
                               limit = None,
                               middle_name = None,
                               middle_name_starts_with = None,
                               modified_since = None,
                               name_starts_with = None,
                               offset = None,
                               order_by = "lastName",
                               series = None,
                               stories = None,
                               suffix = None):
        """Does a GET request to /v1/public/creators.

        Fetches lists of creators.

        Args:
            comics (string, optional): Return only creators who worked on in
                the specified comics (accepts a comma-separated list of ids).
            events (string, optional): Return only creators who worked on
                comics that took place in the specified events (accepts a
                comma-separated list of ids).
            first_name (string, optional): Filter by creator first name (e.g.
                Brian).
            first_name_starts_with (string, optional): Filter by creator first
                names that match critera (e.g. B, St L).
            last_name (string, optional): Filter by creator last name (e.g.
                Bendis).
            last_name_starts_with (string, optional): Filter by creator last
                names that match critera (e.g. Ben).
            limit (string, optional): Limit the result set to the specified
                number of resources.
            middle_name (string, optional): Filter by creator middle name
                (e.g. Michael).
            middle_name_starts_with (string, optional): Filter by creator
                middle names that match critera (e.g. Mi).
            modified_since (string, optional): Return only creators which have
                been modified since the specified date.
            name_starts_with (string, optional): Filter by creator names that
                match critera (e.g. B, St L).
            offset (string, optional): Skip the specified number of resources
                in the result set.
            order_by (string, optional): Order the result set by a field or
                fields. Add a "-" to the value sort in descending order.
                Multiple values are given priority in the order in which they
                are passed. (Acceptable values are: "lastName", "firstName",
                "middleName", "suffix", "modified", "-lastName", "-firstName",
                "-middleName", "-suffix", "-modified")
            series (string, optional): Return only creators who worked on the
                specified series (accepts a comma-separated list of ids).
            stories (string, optional): Return only creators who worked on the
                specified stories (accepts a comma-separated list of ids).
            suffix (string, optional): Filter by suffix or honorific (e.g.
                Jr., Sr.).

        Returns:
            CreatorDataWrapper: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += "/v1/public/creators"

        # Process optional query parameters
        _query_parameters = {
            "comics": comics,
            "events": events,
            "firstName": first_name,
            "firstNameStartsWith": first_name_starts_with,
            "lastName": last_name,
            "lastNameStartsWith": last_name_starts_with,
            "limit": limit,
            "middleName": middle_name,
            "middleNameStartsWith": middle_name_starts_with,
            "modifiedSince": modified_since,
            "nameStartsWith": name_starts_with,
            "offset": offset,
            "orderBy": order_by,
            "series": series,
            "stories": stories,
            "suffix": suffix,
            "apikey": Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "referer": Configuration.referer
        }

        # Prepare the API call.
        _http_request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_http_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_http_request)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_response)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 409:
            raise APIException("Limit greater than 100.", 409, _response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(_response)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, CreatorDataWrapper.from_dictionary)



    def get_creator_individual(self,
                               creator_id):
        """Does a GET request to /v1/public/creators/{creatorId}.

        Fetches a single creator by id.

        Args:
            creator_id (string): A single creator id.

        Returns:
            Creator: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += "/v1/public/creators/{creatorId}"

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            "creatorId": creator_id
        })

        # Process optional query parameters
        _query_parameters = {
            "apikey": Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "referer": Configuration.referer
        }

        # Prepare the API call.
        _http_request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_http_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_http_request)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_response)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 404:
            raise APIException("Creator not found.", 404, _response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(_response)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, Creator.from_dictionary)



    def get_creator_collection_by_event_id(self,
                                           event_id,
                                           comics = None,
                                           first_name = None,
                                           first_name_starts_with = None,
                                           last_name = None,
                                           last_name_starts_with = None,
                                           limit = None,
                                           middle_name = None,
                                           middle_name_starts_with = None,
                                           modified_since = None,
                                           name_starts_with = None,
                                           offset = None,
                                           order_by = "lastName",
                                           series = None,
                                           stories = None,
                                           suffix = None):
        """Does a GET request to /v1/public/events/{eventId}/creators.

        Fetches lists of creators filtered by an event id.

        Args:
            event_id (string): The event ID.
            comics (string, optional): Return only creators who worked on in
                the specified comics (accepts a comma-separated list of ids).
            first_name (string, optional): Filter by creator first name (e.g.
                brian).
            first_name_starts_with (string, optional): Filter by creator first
                names that match critera (e.g. B, St L).
            last_name (string, optional): Filter by creator last name (e.g.
                Bendis).
            last_name_starts_with (string, optional): Filter by creator last
                names that match critera (e.g. Ben).
            limit (string, optional): Limit the result set to the specified
                number of resources.
            middle_name (string, optional): Filter by creator middle name
                (e.g. Michael).
            middle_name_starts_with (string, optional): Filter by creator
                middle names that match critera (e.g. Mi).
            modified_since (string, optional): Return only creators which have
                been modified since the specified date.
            name_starts_with (string, optional): Filter by creator names that
                match critera (e.g. B, St L).
            offset (string, optional): Skip the specified number of resources
                in the result set.
            order_by (string, optional): Order the result set by a field or
                fields. Add a "-" to the value sort in descending order.
                Multiple values are given priority in the order in which they
                are passed. (Acceptable values are: "lastName", "firstName",
                "middleName", "suffix", "modified", "-lastName", "-firstName",
                "-middleName", "-suffix", "-modified")
            series (string, optional): Return only creators who worked on the
                specified series (accepts a comma-separated list of ids).
            stories (string, optional): Return only creators who worked on the
                specified stories (accepts a comma-separated list of ids).
            suffix (string, optional): Filter by suffix or honorific (e.g.
                Jr., Sr.).

        Returns:
            CreatorDataWrapper: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += "/v1/public/events/{eventId}/creators"

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            "eventId": event_id
        })

        # Process optional query parameters
        _query_parameters = {
            "comics": comics,
            "firstName": first_name,
            "firstNameStartsWith": first_name_starts_with,
            "lastName": last_name,
            "lastNameStartsWith": last_name_starts_with,
            "limit": limit,
            "middleName": middle_name,
            "middleNameStartsWith": middle_name_starts_with,
            "modifiedSince": modified_since,
            "nameStartsWith": name_starts_with,
            "offset": offset,
            "orderBy": order_by,
            "series": series,
            "stories": stories,
            "suffix": suffix,
            "apikey": Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "referer": Configuration.referer
        }

        # Prepare the API call.
        _http_request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_http_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_http_request)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_response)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 409:
            raise APIException("Limit greater than 100.", 409, _response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(_response)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, CreatorDataWrapper.from_dictionary)



    def get_creator_collection_by_series_id(self,
                                            series_id,
                                            comics = None,
                                            events = None,
                                            first_name = None,
                                            first_name_starts_with = None,
                                            last_name = None,
                                            last_name_starts_with = None,
                                            limit = None,
                                            middle_name = None,
                                            middle_name_starts_with = None,
                                            modified_since = None,
                                            name_starts_with = None,
                                            offset = None,
                                            order_by = "lastName",
                                            stories = None,
                                            suffix = None):
        """Does a GET request to /v1/public/series/{seriesId}/creators.

        Fetches lists of creators filtered by a series id.

        Args:
            series_id (string): The series ID.
            comics (string, optional): Return only creators who worked on in
                the specified comics (accepts a comma-separated list of ids).
            events (string, optional): Return only creators who worked on
                comics that took place in the specified events (accepts a
                comma-separated list of ids).
            first_name (string, optional): Filter by creator first name (e.g.
                brian).
            first_name_starts_with (string, optional): Filter by creator first
                names that match critera (e.g. B, St L).
            last_name (string, optional): Filter by creator last name (e.g.
                Bendis).
            last_name_starts_with (string, optional): Filter by creator last
                names that match critera (e.g. Ben).
            limit (string, optional): Limit the result set to the specified
                number of resources.
            middle_name (string, optional): Filter by creator middle name
                (e.g. Michael).
            middle_name_starts_with (string, optional): Filter by creator
                middle names that match critera (e.g. Mi).
            modified_since (string, optional): Return only creators which have
                been modified since the specified date.
            name_starts_with (string, optional): Filter by creator names that
                match critera (e.g. B, St L).
            offset (string, optional): Skip the specified number of resources
                in the result set.
            order_by (string, optional): Order the result set by a field or
                fields. Add a "-" to the value sort in descending order.
                Multiple values are given priority in the order in which they
                are passed. (Acceptable values are: "lastName", "firstName",
                "middleName", "suffix", "modified", "-lastName", "-firstName",
                "-middleName", "-suffix", "-modified")
            stories (string, optional): Return only creators who worked on the
                specified stories (accepts a comma-separated list of ids).
            suffix (string, optional): Filter by suffix or honorific (e.g.
                Jr., Sr.).

        Returns:
            CreatorDataWrapper: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += "/v1/public/series/{seriesId}/creators"

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            "seriesId": series_id
        })

        # Process optional query parameters
        _query_parameters = {
            "comics": comics,
            "events": events,
            "firstName": first_name,
            "firstNameStartsWith": first_name_starts_with,
            "lastName": last_name,
            "lastNameStartsWith": last_name_starts_with,
            "limit": limit,
            "middleName": middle_name,
            "middleNameStartsWith": middle_name_starts_with,
            "modifiedSince": modified_since,
            "nameStartsWith": name_starts_with,
            "offset": offset,
            "orderBy": order_by,
            "stories": stories,
            "suffix": suffix,
            "apikey": Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "referer": Configuration.referer
        }

        # Prepare the API call.
        _http_request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_http_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_http_request)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_response)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 409:
            raise APIException("Limit greater than 100.", 409, _response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(_response)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, CreatorDataWrapper.from_dictionary)



    def get_creator_collection_by_story_id(self,
                                           story_id,
                                           comics = None,
                                           events = None,
                                           first_name = None,
                                           first_name_starts_with = None,
                                           last_name = None,
                                           last_name_starts_with = None,
                                           limit = None,
                                           middle_name = None,
                                           middle_name_starts_with = None,
                                           modified_since = None,
                                           name_starts_with = None,
                                           offset = None,
                                           order_by = "lastName",
                                           series = None,
                                           suffix = None):
        """Does a GET request to /v1/public/stories/{storyId}/creators.

        Fetches lists of creators filtered by a story id.

        Args:
            story_id (string): The story ID.
            comics (string, optional): Return only creators who worked on in
                the specified comics (accepts a comma-separated list of ids).
            events (string, optional): Return only creators who worked on
                comics that took place in the specified events (accepts a
                comma-separated list of ids).
            first_name (string, optional): Filter by creator first name (e.g.
                brian).
            first_name_starts_with (string, optional): Filter by creator first
                names that match critera (e.g. B, St L).
            last_name (string, optional): Filter by creator last name (e.g.
                Bendis).
            last_name_starts_with (string, optional): Filter by creator last
                names that match critera (e.g. Ben).
            limit (string, optional): Limit the result set to the specified
                number of resources.
            middle_name (string, optional): Filter by creator middle name
                (e.g. Michael).
            middle_name_starts_with (string, optional): Filter by creator
                middle names that match critera (e.g. Mi).
            modified_since (string, optional): Return only creators which have
                been modified since the specified date.
            name_starts_with (string, optional): Filter by creator names that
                match critera (e.g. B, St L).
            offset (string, optional): Skip the specified number of resources
                in the result set.
            order_by (string, optional): Order the result set by a field or
                fields. Add a "-" to the value sort in descending order.
                Multiple values are given priority in the order in which they
                are passed. (Acceptable values are: "lastName", "firstName",
                "middleName", "suffix", "modified", "-lastName", "-firstName",
                "-middleName", "-suffix", "-modified")
            series (string, optional): Return only creators who worked on the
                specified series (accepts a comma-separated list of ids).
            suffix (string, optional): Filter by suffix or honorific (e.g.
                Jr., Sr.).

        Returns:
            CreatorDataWrapper: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += "/v1/public/stories/{storyId}/creators"

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            "storyId": story_id
        })

        # Process optional query parameters
        _query_parameters = {
            "comics": comics,
            "events": events,
            "firstName": first_name,
            "firstNameStartsWith": first_name_starts_with,
            "lastName": last_name,
            "lastNameStartsWith": last_name_starts_with,
            "limit": limit,
            "middleName": middle_name,
            "middleNameStartsWith": middle_name_starts_with,
            "modifiedSince": modified_since,
            "nameStartsWith": name_starts_with,
            "offset": offset,
            "orderBy": order_by,
            "series": series,
            "suffix": suffix,
            "apikey": Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "referer": Configuration.referer
        }

        # Prepare the API call.
        _http_request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_http_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_http_request)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_response)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 409:
            raise APIException("Limit greater than 100.", 409, _response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(_response)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, CreatorDataWrapper.from_dictionary)


