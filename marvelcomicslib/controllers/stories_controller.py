# -*- coding: utf-8 -*-

"""
    marvelcomicslib.controllers.stories_controller

    This file was automatically generated by APIMATIC BETA v2.0 on 07/21/2016
"""

from marvelcomicslib.controllers.base_controller import *

from marvelcomicslib.models.story_data_wrapper import StoryDataWrapper
from marvelcomicslib.models.story import Story


class StoriesController(BaseController):

    """A Controller to access Endpoints in the marvelcomicslib API."""

    def __init__(self, http_client = None, http_call_back = None):
        """Constructor which allows a different HTTP client for this controller."""
        BaseController.__init__(self, http_client, http_call_back)

    def get_character_story_collection(self,
                                       character_id,
                                       comics = None,
                                       creators = None,
                                       events = None,
                                       limit = None,
                                       modified_since = None,
                                       offset = None,
                                       order_by = "id",
                                       series = None):
        """Does a GET request to /v1/public/characters/{characterId}/stories.

        Fetches lists of stories filtered by a character id.

        Args:
            character_id (string): The character ID.
            comics (string, optional): Return only stories contained in the
                specified (accepts a comma-separated list of ids).
            creators (string, optional): Return only stories which feature
                work by the specified creators (accepts a comma-separated list
                of ids).
            events (string, optional): Return only stories which take place
                during the specified events (accepts a comma-separated list of
                ids).
            limit (string, optional): Limit the result set to the specified
                number of resources.
            modified_since (string, optional): Return only stories which have
                been modified since the specified date.
            offset (string, optional): Skip the specified number of resources
                in the result set.
            order_by (string, optional): Order the result set by a field or
                fields. Add a "-" to the value sort in descending order.
                Multiple values are given priority in the order in which they
                are passed. (Acceptable values are: "id", "modified", "-id",
                "-modified")
            series (string, optional): Return only stories contained the
                specified series (accepts a comma-separated list of ids).

        Returns:
            StoryDataWrapper: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += "/v1/public/characters/{characterId}/stories"

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            "characterId": character_id
        })

        # Process optional query parameters
        _query_parameters = {
            "comics": comics,
            "creators": creators,
            "events": events,
            "limit": limit,
            "modifiedSince": modified_since,
            "offset": offset,
            "orderBy": order_by,
            "series": series,
            "apikey": Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "referer": Configuration.referer
        }

        # Prepare the API call.
        _http_request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_http_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_http_request)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_response)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 409:
            raise APIException("Limit greater than 100.", 409, _response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(_response)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, StoryDataWrapper.from_dictionary)



    def get_comic_story_collection_by_comic_id(self,
                                               comic_id,
                                               characters = None,
                                               creators = None,
                                               events = None,
                                               limit = None,
                                               modified_since = None,
                                               offset = None,
                                               order_by = "id",
                                               series = None):
        """Does a GET request to /v1/public/comics/{comicId}/stories.

        Fetches lists of stories filtered by a comic id.

        Args:
            comic_id (string): The comic ID.
            characters (string, optional): Return only stories which feature
                the specified characters (accepts a comma-separated list of
                ids).
            creators (string, optional): Return only stories which feature
                work by the specified creators (accepts a comma-separated list
                of ids).
            events (string, optional): Return only stories which take place
                during the specified events (accepts a comma-separated list of
                ids).
            limit (string, optional): Limit the result set to the specified
                number of resources.
            modified_since (string, optional): Return only stories which have
                been modified since the specified date.
            offset (string, optional): Skip the specified number of
                resources.
            order_by (string, optional): Order the result set by a field or
                fields. Add a "-" to the value sort in descending order.
                Multiple values are given priority in the order in which they
                are passed. (Acceptable values are: "id", "modified", "-id",
                "-modified")
            series (string, optional): Return only stories contained the
                specified series (accepts a comma-separated list of ids).

        Returns:
            StoryDataWrapper: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += "/v1/public/comics/{comicId}/stories"

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            "comicId": comic_id
        })

        # Process optional query parameters
        _query_parameters = {
            "characters": characters,
            "creators": creators,
            "events": events,
            "limit": limit,
            "modifiedSince": modified_since,
            "offset": offset,
            "orderBy": order_by,
            "series": series,
            "apikey": Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "referer": Configuration.referer
        }

        # Prepare the API call.
        _http_request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_http_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_http_request)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_response)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 409:
            raise APIException("Limit greater than 100.", 409, _response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(_response)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, StoryDataWrapper.from_dictionary)



    def get_creator_story_collection(self,
                                     creator_id,
                                     characters = None,
                                     comics = None,
                                     events = None,
                                     limit = None,
                                     modified_since = None,
                                     offset = None,
                                     order_by = "id",
                                     series = None):
        """Does a GET request to /v1/public/creators/{creatorId}/stories.

        Fetches lists of stories filtered by a creator id.

        Args:
            creator_id (string): The ID of the creator.
            characters (string, optional): Return only stories which feature
                the specified characters (accepts a comma-separated list of
                ids).
            comics (string, optional): Return only stories contained in the
                specified comics (accepts a comma-separated list of ids).
            events (string, optional): Return only stories which take place
                during the specified events (accepts a comma-separated list of
                ids).
            limit (string, optional): Limit the result set to the specified
                number of resources.
            modified_since (string, optional): Return only stories which have
                been modified since the specified date.
            offset (string, optional): Skip the specified number of resources
                in the result set.
            order_by (string, optional): Order the result set by a field or
                fields. Add a "-" to the value sort in descending order.
                Multiple values are given priority in the order in which they
                are passed. (Acceptable values are: "id", "modified", "-id",
                "-modified")
            series (string, optional): Return only stories contained the
                specified series (accepts a comma-separated list of ids).

        Returns:
            StoryDataWrapper: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += "/v1/public/creators/{creatorId}/stories"

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            "creatorId": creator_id
        })

        # Process optional query parameters
        _query_parameters = {
            "characters": characters,
            "comics": comics,
            "events": events,
            "limit": limit,
            "modifiedSince": modified_since,
            "offset": offset,
            "orderBy": order_by,
            "series": series,
            "apikey": Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "referer": Configuration.referer
        }

        # Prepare the API call.
        _http_request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_http_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_http_request)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_response)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 409:
            raise APIException("Limit greater than 100.", 409, _response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(_response)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, StoryDataWrapper.from_dictionary)



    def get_event_story_collection(self,
                                   event_id,
                                   characters = None,
                                   comics = None,
                                   creators = None,
                                   limit = None,
                                   modified_since = None,
                                   offset = None,
                                   order_by = "id",
                                   series = None):
        """Does a GET request to /v1/public/events/{eventId}/stories.

        Fetches lists of stories filtered by an event id.

        Args:
            event_id (string): The ID of the event.
            characters (string, optional): Return only stories which feature
                the specified characters (accepts a comma-separated list of
                ids).
            comics (string, optional): Return only stories contained in the
                specified (accepts a comma-separated list of ids).
            creators (string, optional): Return only stories which feature
                work by the specified creators (accepts a comma-separated list
                of ids).
            limit (string, optional): Limit the result set to the specified
                number of resources.
            modified_since (string, optional): Return only stories which have
                been modified since the specified date.
            offset (string, optional): Skip the specified number of resources
                in the result set.
            order_by (string, optional): Order the result set by a field or
                fields. Add a "-" to the value sort in descending order.
                Multiple values are given priority in the order in which they
                are passed. (Acceptable values are: "id", "modified", "-id",
                "-modified")
            series (string, optional): Return only stories contained the
                specified series (accepts a comma-separated list of ids).

        Returns:
            StoryDataWrapper: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += "/v1/public/events/{eventId}/stories"

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            "eventId": event_id
        })

        # Process optional query parameters
        _query_parameters = {
            "characters": characters,
            "comics": comics,
            "creators": creators,
            "limit": limit,
            "modifiedSince": modified_since,
            "offset": offset,
            "orderBy": order_by,
            "series": series,
            "apikey": Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "referer": Configuration.referer
        }

        # Prepare the API call.
        _http_request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_http_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_http_request)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_response)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 409:
            raise APIException("Limit greater than 100.", 409, _response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(_response)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, StoryDataWrapper.from_dictionary)



    def get_series_story_collection(self,
                                    series_id,
                                    characters = None,
                                    comics = None,
                                    creators = None,
                                    events = None,
                                    limit = None,
                                    modified_since = None,
                                    offset = None,
                                    order_by = "id"):
        """Does a GET request to /v1/public/series/{seriesId}/stories.

        Fetches lists of stories filtered by a series id.

        Args:
            series_id (string): The series ID.
            characters (string, optional): Return only stories which feature
                the specified characters (accepts a comma-separated list of
                ids).
            comics (string, optional): Return only stories contained in the
                specified (accepts a comma-separated list of ids).
            creators (string, optional): Return only stories which feature
                work by the specified creators (accepts a comma-separated list
                of ids).
            events (string, optional): Return only stories which take place
                during the specified events (accepts a comma-separated list of
                ids).
            limit (string, optional): Limit the result set to the specified
                number of resources.
            modified_since (string, optional): Return only stories which have
                been modified since the specified date.
            offset (string, optional): Skip the specified number of resources
                in the result set.
            order_by (string, optional): Order the result set by a field or
                fields. Add a "-" to the value sort in descending order.
                Multiple values are given priority in the order in which they
                are passed. (Acceptable values are: "id", "modified", "-id",
                "-modified")

        Returns:
            StoryDataWrapper: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += "/v1/public/series/{seriesId}/stories"

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            "seriesId": series_id
        })

        # Process optional query parameters
        _query_parameters = {
            "characters": characters,
            "comics": comics,
            "creators": creators,
            "events": events,
            "limit": limit,
            "modifiedSince": modified_since,
            "offset": offset,
            "orderBy": order_by,
            "apikey": Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "referer": Configuration.referer
        }

        # Prepare the API call.
        _http_request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_http_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_http_request)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_response)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 409:
            raise APIException("Limit greater than 100.", 409, _response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(_response)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, StoryDataWrapper.from_dictionary)



    def get_story_collection(self,
                             characters = None,
                             comics = None,
                             creators = None,
                             events = None,
                             limit = None,
                             modified_since = None,
                             offset = None,
                             order_by = "id",
                             series = None):
        """Does a GET request to /v1/public/stories.

        Fetches lists of stories.

        Args:
            characters (string, optional): Return only stories which feature
                the specified characters (accepts a comma-separated list of
                ids).
            comics (string, optional): Return only stories contained in the
                specified (accepts a comma-separated list of ids).
            creators (string, optional): Return only stories which feature
                work by the specified creators (accepts a comma-separated list
                of ids).
            events (string, optional): Return only stories which take place
                during the specified events (accepts a comma-separated list of
                ids).
            limit (string, optional): Limit the result set to the specified
                number of resources.
            modified_since (string, optional): Return only stories which have
                been modified since the specified date.
            offset (string, optional): Skip the specified number of resources
                in the result set.
            order_by (string, optional): Order the result set by a field or
                fields. Add a "-" to the value sort in descending order.
                Multiple values are given priority in the order in which they
                are passed. (Acceptable values are: "id", "modified", "-id",
                "-modified")
            series (string, optional): Return only stories contained the
                specified series (accepts a comma-separated list of ids).

        Returns:
            StoryDataWrapper: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += "/v1/public/stories"

        # Process optional query parameters
        _query_parameters = {
            "characters": characters,
            "comics": comics,
            "creators": creators,
            "events": events,
            "limit": limit,
            "modifiedSince": modified_since,
            "offset": offset,
            "orderBy": order_by,
            "series": series,
            "apikey": Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "referer": Configuration.referer
        }

        # Prepare the API call.
        _http_request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_http_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_http_request)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_response)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 409:
            raise APIException("Limit greater than 100.", 409, _response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(_response)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, StoryDataWrapper.from_dictionary)



    def get_story_individual(self,
                             story_id):
        """Does a GET request to /v1/public/stories/{storyId}.

        Fetches a single comic story by id.

        Args:
            story_id (string): Filter by story id.

        Returns:
            Story: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += "/v1/public/stories/{storyId}"

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            "storyId": story_id
        })

        # Process optional query parameters
        _query_parameters = {
            "apikey": Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "referer": Configuration.referer
        }

        # Prepare the API call.
        _http_request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_http_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_http_request)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_response)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 404:
            raise APIException("Story not found.", 404, _response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(_response)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, Story.from_dictionary)


