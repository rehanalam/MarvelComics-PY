# -*- coding: utf-8 -*-

"""
    marvelcomicslib.controllers.comics_controller

    This file was automatically generated by APIMATIC BETA v2.0 on 07/21/2016
"""

from marvelcomicslib.controllers.base_controller import *

from marvelcomicslib.models.comic_data_wrapper import ComicDataWrapper
from marvelcomicslib.models.comic import Comic


class ComicsController(BaseController):

    """A Controller to access Endpoints in the marvelcomicslib API."""

    def __init__(self, http_client = None, http_call_back = None):
        """Constructor which allows a different HTTP client for this controller."""
        BaseController.__init__(self, http_client, http_call_back)

    def get_comics_character_collection(self,
                                        character_id,
                                        collaborators = None,
                                        creators = None,
                                        date_descriptor = None,
                                        date_range = None,
                                        diamond_code = None,
                                        digital_id = None,
                                        ean = None,
                                        events = None,
                                        format = "comic",
                                        format_type = None,
                                        has_digital_issue = "true",
                                        isbn = None,
                                        issn = None,
                                        issue_number = None,
                                        limit = None,
                                        modified_since = None,
                                        no_variants = "true",
                                        offset = None,
                                        order_by = "focDate",
                                        series = None,
                                        shared_appearances = None,
                                        start_year = None,
                                        stories = None,
                                        title = None,
                                        title_starts_with = None,
                                        upc = None):
        """Does a GET request to /v1/public/characters/{characterId}/comics.

        Fetches lists of comics filtered by a character id.

        Args:
            character_id (string): The character id.
            collaborators (string, optional): Return only comics in which the
                specified creators worked together (for example in which BOTH
                Stan Lee and Jack Kirby did work).
            creators (string, optional): Return only comics which feature work
                by the specified creators (accepts a comma-separated list of
                ids).
            date_descriptor (DateDescriptorEnum, optional): Return comics
                within a predefined date range.
            date_range (string, optional): Return comics within a predefined
                date range.  Dates must be specified as date1,date2 (e.g.
                2013-01-01,2013-01-02).  Dates are preferably formatted as
                YYYY-MM-DD but may be sent as any common date format.
            diamond_code (string, optional): Filter by diamond code.
            digital_id (string, optional): Filter by digital comic id.
            ean (string, optional): Filter by EAN.
            events (string, optional): Return only comics which take place in
                the specified events (accepts a comma-separated list of ids).
            format (string, optional): Filter by the issue format (e.g. comic,
                digital comic, hardcover). (Acceptable values are: "comic",
                "magazine", "trade paperback", "hardcover", "digest", "graphic
                novel", "digital comic", "infinite comic")
            format_type (FormatTypeEnum, optional): Filter by the issue format
                type (comic or collection).
            has_digital_issue (string, optional): Include only results which
                are available digitally. (Acceptable values are: "true")
            isbn (string, optional): Filter by ISBN.
            issn (string, optional): Filter by ISSN.
            issue_number (string, optional): Return only issues in series
                whose issue number matches the input.
            limit (string, optional): Limit the result set to the specified
                number of resources.
            modified_since (string, optional): Return only comics which have
                been modified since the specified date.
            no_variants (string, optional): Exclude variant comics from the
                result set. (Acceptable values are: "true")
            offset (string, optional): Skip the specified number of resources
                in the result set.
            order_by (string, optional): Order the result set by a field or
                fields. Add a "-" to the value sort in descending order.
                Multiple values are given priority in the order in which they
                are passed. (Acceptable values are: "focDate", "onsaleDate",
                "title", "issueNumber", "modified", "-focDate", "-onsaleDate",
                "-title", "-issueNumber", "-modified")
            series (string, optional): Return only comics which are part of
                the specified series (accepts a comma-separated list of ids).
            shared_appearances (string, optional): Return only comics in which
                the specified characters appear together (for example in which
                BOTH Spider-Man and Wolverine appear).
            start_year (string, optional): Return only issues in series whose
                start year matches the input.
            stories (string, optional): Return only comics which contain the
                specified stories (accepts a comma-separated list of ids).
            title (string, optional): Return only issues in series whose title
                matches the input.
            title_starts_with (string, optional): Return only issues in series
                whose title starts with the input.
            upc (string, optional): Filter by UPC.

        Returns:
            ComicDataWrapper: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += "/v1/public/characters/{characterId}/comics"

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            "characterId": character_id
        })

        # Process optional query parameters
        _query_parameters = {
            "collaborators": collaborators,
            "creators": creators,
            "dateDescriptor": date_descriptor,
            "dateRange": date_range,
            "diamondCode": diamond_code,
            "digitalId": digital_id,
            "ean": ean,
            "events": events,
            "format": format,
            "formatType": format_type,
            "hasDigitalIssue": has_digital_issue,
            "isbn": isbn,
            "issn": issn,
            "issueNumber": issue_number,
            "limit": limit,
            "modifiedSince": modified_since,
            "noVariants": no_variants,
            "offset": offset,
            "orderBy": order_by,
            "series": series,
            "sharedAppearances": shared_appearances,
            "startYear": start_year,
            "stories": stories,
            "title": title,
            "titleStartsWith": title_starts_with,
            "upc": upc,
            "apikey": Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "referer": Configuration.referer
        }

        # Prepare the API call.
        _http_request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_http_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_http_request)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_response)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 409:
            raise APIException("Limit greater than 100.", 409, _response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(_response)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, ComicDataWrapper.from_dictionary)



    def get_comics_collection(self,
                              characters = None,
                              collaborators = None,
                              creators = None,
                              date_descriptor = None,
                              date_range = None,
                              diamond_code = None,
                              digital_id = None,
                              ean = None,
                              events = None,
                              format = "comic",
                              format_type = None,
                              has_digital_issue = "true",
                              isbn = None,
                              issn = None,
                              issue_number = None,
                              limit = None,
                              modified_since = None,
                              no_variants = "true",
                              offset = None,
                              order_by = "focDate",
                              series = None,
                              shared_appearances = None,
                              start_year = None,
                              stories = None,
                              title = None,
                              title_starts_with = None,
                              upc = None):
        """Does a GET request to /v1/public/comics.

        Fetches lists of comics.

        Args:
            characters (string, optional): Return only comics which feature
                the specified characters (accepts a comma-separated list of
                ids).
            collaborators (string, optional): Return only comics in which the
                specified creators worked together (for example in which BOTH
                Stan Lee and Jack Kirby did work). Accepts a comma-separated
                list of ids.
            creators (string, optional): Return only comics which feature work
                by the specified creators (accepts a comma-separated list of
                ids).
            date_descriptor (DateDescriptorEnum, optional): Return comics
                within a predefined date range.
            date_range (string, optional): Return comics within a predefined
                date range.  Dates must be specified as date1,date2 (e.g.
                2013-01-01,2013-01-02).  Dates are preferably formatted as
                YYYY-MM-DD but may be sent as any common date format.
            diamond_code (string, optional): Filter by diamond code.
            digital_id (string, optional): Filter by digital comic id.
            ean (string, optional): Filter by EAN.
            events (string, optional): Return only comics which take place in
                the specified events (accepts a comma-separated list of ids).
            format (string, optional): Filter by the issue format (e.g. comic,
                digital comic, hardcover). (Acceptable values are: "comic",
                "magazine", "trade paperback", "hardcover", "digest", "graphic
                novel", "digital comic", "infinite comic")
            format_type (FormatTypeEnum, optional): Filter by the issue format
                type (comic or collection).
            has_digital_issue (string, optional): Include only results which
                are available digitally. (Acceptable values are: "true")
            isbn (string, optional): Filter by ISBN.
            issn (string, optional): Filter by ISSN.
            issue_number (string, optional): Return only issues in series
                whose issue number matches the input.
            limit (string, optional): Limit the result set to the specified
                number of resources.
            modified_since (string, optional): Return only comics which have
                been modified since the specified date.
            no_variants (string, optional): Exclude variants (alternate
                covers, secondary printings, director's cuts, etc.) from the
                result set. (Acceptable values are: "true")
            offset (string, optional): Skip the specified number of resources
                in the result set.
            order_by (string, optional): Order the result set by a field or
                fields. Add a "-" to the value sort in descending order.
                Multiple values are given priority in the order in which they
                are passed. (Acceptable values are: "focDate", "onsaleDate",
                "title", "issueNumber", "modified", "-focDate", "-onsaleDate",
                "-title", "-issueNumber", "-modified")
            series (string, optional): Return only comics which are part of
                the specified series (accepts a comma-separated list of ids).
            shared_appearances (string, optional): Return only comics in which
                the specified characters appear together (for example in which
                BOTH Spider-Man and Wolverine appear). Accepts a
                comma-separated list of ids.
            start_year (string, optional): Return only issues in series whose
                start year matches the input.
            stories (string, optional): Return only comics which contain the
                specified stories (accepts a comma-separated list of ids).
            title (string, optional): Return only issues in series whose title
                matches the input.
            title_starts_with (string, optional): Return only issues in series
                whose title starts with the input.
            upc (string, optional): Filter by UPC.

        Returns:
            ComicDataWrapper: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += "/v1/public/comics"

        # Process optional query parameters
        _query_parameters = {
            "characters": characters,
            "collaborators": collaborators,
            "creators": creators,
            "dateDescriptor": date_descriptor,
            "dateRange": date_range,
            "diamondCode": diamond_code,
            "digitalId": digital_id,
            "ean": ean,
            "events": events,
            "format": format,
            "formatType": format_type,
            "hasDigitalIssue": has_digital_issue,
            "isbn": isbn,
            "issn": issn,
            "issueNumber": issue_number,
            "limit": limit,
            "modifiedSince": modified_since,
            "noVariants": no_variants,
            "offset": offset,
            "orderBy": order_by,
            "series": series,
            "sharedAppearances": shared_appearances,
            "startYear": start_year,
            "stories": stories,
            "title": title,
            "titleStartsWith": title_starts_with,
            "upc": upc,
            "apikey": Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "referer": Configuration.referer
        }

        # Prepare the API call.
        _http_request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_http_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_http_request)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_response)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 409:
            raise APIException("Limit greater than 100.", 409, _response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(_response)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, ComicDataWrapper.from_dictionary)



    def get_comic_individual(self,
                             comic_id):
        """Does a GET request to /v1/public/comics/{comicId}.

        Fetches a single comic by id.

        Args:
            comic_id (string): A single comic.

        Returns:
            Comic: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += "/v1/public/comics/{comicId}"

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            "comicId": comic_id
        })

        # Process optional query parameters
        _query_parameters = {
            "apikey": Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "referer": Configuration.referer
        }

        # Prepare the API call.
        _http_request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_http_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_http_request)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_response)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 404:
            raise APIException("Comic not found.", 404, _response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(_response)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, Comic.from_dictionary)



    def get_comics_collection_by_creator_id(self,
                                            creator_id,
                                            characters = None,
                                            collaborators = None,
                                            date_descriptor = None,
                                            date_range = None,
                                            diamond_code = None,
                                            digital_id = None,
                                            ean = None,
                                            events = None,
                                            format = "comic",
                                            format_type = None,
                                            has_digital_issue = "true",
                                            isbn = None,
                                            issn = None,
                                            issue_number = None,
                                            limit = None,
                                            modified_since = None,
                                            no_variants = "true",
                                            offset = None,
                                            order_by = "focDate",
                                            series = None,
                                            shared_appearances = None,
                                            start_year = None,
                                            stories = None,
                                            title = None,
                                            title_starts_with = None,
                                            upc = None):
        """Does a GET request to /v1/public/creators/{creatorId}/comics.

        Fetches lists of comics filtered by a creator id.

        Args:
            creator_id (string): The creator ID.
            characters (string, optional): Return only comics which feature
                the specified characters (accepts a comma-separated list of
                ids).
            collaborators (string, optional): Return only comics in which the
                specified creators worked together (for example in which BOTH
                Stan Lee and Jack Kirby did work).
            date_descriptor (DateDescriptorEnum, optional): Return comics
                within a predefined date range.
            date_range (string, optional): Return comics within a predefined
                date range.  Dates must be specified as date1,date2 (e.g.
                2013-01-01,2013-01-02).  Dates are preferably formatted as
                YYYY-MM-DD but may be sent as any common date format.
            diamond_code (string, optional): Filter by diamond code.
            digital_id (string, optional): Filter by digital comic id.
            ean (string, optional): Filter by EAN.
            events (string, optional): Return only comics which take place in
                the specified events (accepts a comma-separated list of ids).
            format (string, optional): Filter by the issue format (e.g. comic,
                digital comic, hardcover). (Acceptable values are: "comic",
                "magazine", "trade paperback", "hardcover", "digest", "graphic
                novel", "digital comic", "infinite comic")
            format_type (FormatTypeEnum, optional): Filter by the issue format
                type (comic or collection).
            has_digital_issue (string, optional): Include only results which
                are available digitally. (Acceptable values are: "true")
            isbn (string, optional): Filter by ISBN.
            issn (string, optional): Filter by ISSN.
            issue_number (string, optional): Return only issues in series
                whose issue number matches the input.
            limit (string, optional): Limit the result set to the specified
                number of resources.
            modified_since (string, optional): Return only comics which have
                been modified since the specified date.
            no_variants (string, optional): Exclude variant comics from the
                result set. (Acceptable values are: "true")
            offset (string, optional): Skip the specified number of resources
                in the result set.
            order_by (string, optional): Order the result set by a field or
                fields. Add a "-" to the value sort in descending order.
                Multiple values are given priority in the order in which they
                are passed. (Acceptable values are: "focDate", "onsaleDate",
                "title", "issueNumber", "modified", "-focDate", "-onsaleDate",
                "-title", "-issueNumber", "-modified")
            series (string, optional): Return only comics which are part of
                the specified series (accepts a comma-separated list of ids).
            shared_appearances (string, optional): Return only comics in which
                the specified characters appear together (for example in which
                BOTH Spider-Man and Wolverine appear).
            start_year (string, optional): Return only issues in series whose
                start year matches the input.
            stories (string, optional): Return only comics which contain the
                specified stories (accepts a comma-separated list of ids).
            title (string, optional): Return only issues in series whose title
                matches the input.
            title_starts_with (string, optional): Return only issues in series
                whose title starts with the input.
            upc (string, optional): Filter by UPC.

        Returns:
            ComicDataWrapper: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += "/v1/public/creators/{creatorId}/comics"

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            "creatorId": creator_id
        })

        # Process optional query parameters
        _query_parameters = {
            "characters": characters,
            "collaborators": collaborators,
            "dateDescriptor": date_descriptor,
            "dateRange": date_range,
            "diamondCode": diamond_code,
            "digitalId": digital_id,
            "ean": ean,
            "events": events,
            "format": format,
            "formatType": format_type,
            "hasDigitalIssue": has_digital_issue,
            "isbn": isbn,
            "issn": issn,
            "issueNumber": issue_number,
            "limit": limit,
            "modifiedSince": modified_since,
            "noVariants": no_variants,
            "offset": offset,
            "orderBy": order_by,
            "series": series,
            "sharedAppearances": shared_appearances,
            "startYear": start_year,
            "stories": stories,
            "title": title,
            "titleStartsWith": title_starts_with,
            "upc": upc,
            "apikey": Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "referer": Configuration.referer
        }

        # Prepare the API call.
        _http_request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_http_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_http_request)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_response)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 409:
            raise APIException("Limit greater than 100.", 409, _response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(_response)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, ComicDataWrapper.from_dictionary)



    def get_comics_collection_by_event_id(self,
                                          event_id,
                                          characters = None,
                                          collaborators = None,
                                          creators = None,
                                          date_descriptor = None,
                                          date_range = None,
                                          diamond_code = None,
                                          digital_id = None,
                                          ean = None,
                                          events = None,
                                          format = "comic",
                                          format_type = None,
                                          has_digital_issue = "true",
                                          isbn = None,
                                          issn = None,
                                          issue_number = None,
                                          limit = None,
                                          modified_since = None,
                                          no_variants = "true",
                                          offset = None,
                                          order_by = "focDate",
                                          series = None,
                                          shared_appearances = None,
                                          start_year = None,
                                          stories = None,
                                          title = None,
                                          title_starts_with = None,
                                          upc = None):
        """Does a GET request to /v1/public/events/{eventId}/comics.

        Fetches lists of comics filtered by an event id.

        Args:
            event_id (string): The event id.
            characters (string, optional): Return only comics which feature
                the specified characters (accepts a comma-separated list of
                ids).
            collaborators (string, optional): Return only comics in which the
                specified creators worked together (for example in which BOTH
                Stan Lee and Jack Kirby did work).
            creators (string, optional): Return only comics which feature work
                by the specified creators (accepts a comma-separated list of
                ids).
            date_descriptor (DateDescriptorEnum, optional): Return comics
                within a predefined date range.
            date_range (string, optional): Return comics within a predefined
                date range.  Dates must be specified as date1,date2 (e.g.
                2013-01-01,2013-01-02).  Dates are preferably formatted as
                YYYY-MM-DD but may be sent as any common date format.
            diamond_code (string, optional): Filter by diamond code.
            digital_id (string, optional): Filter by digital comic id.
            ean (string, optional): Filter by EAN.
            events (string, optional): Return only comics which take place in
                the specified events (accepts a comma-separated list of ids).
            format (string, optional): Filter by the issue format (e.g. comic,
                digital comic, hardcover). (Acceptable values are: "comic",
                "magazine", "trade paperback", "hardcover", "digest", "graphic
                novel", "digital comic", "infinite comic")
            format_type (FormatTypeEnum, optional): Filter by the issue format
                type (comic or collection).
            has_digital_issue (string, optional): Include only results which
                are available digitally. (Acceptable values are: "true")
            isbn (string, optional): Filter by ISBN.
            issn (string, optional): Filter by ISSN.
            issue_number (string, optional): Return only issues in series
                whose issue number matches the input.
            limit (string, optional): Limit the result set to the specified
                number of resources.
            modified_since (string, optional): Return only comics which have
                been modified since the specified date.
            no_variants (string, optional): Exclude variant comics from the
                result set. (Acceptable values are: "true")
            offset (string, optional): Skip the specified number of resources
                in the result set.
            order_by (string, optional): Order the result set by a field or
                fields. Add a "-" to the value sort in descending order.
                Multiple values are given priority in the order in which they
                are passed. (Acceptable values are: "focDate", "onsaleDate",
                "title", "issueNumber", "modified", "-focDate", "-onsaleDate",
                "-title", "-issueNumber", "-modified")
            series (string, optional): Return only comics which are part of
                the specified series (accepts a comma-separated list of ids).
            shared_appearances (string, optional): Return only comics in which
                the specified characters appear together (for example in which
                BOTH Spider-Man and Wolverine appear).
            start_year (string, optional): Return only issues in series whose
                start year matches the input.
            stories (string, optional): Return only comics which contain the
                specified stories (accepts a comma-separated list of ids).
            title (string, optional): Return only issues in series whose title
                matches the input.
            title_starts_with (string, optional): Return only issues in series
                whose title starts with the input.
            upc (string, optional): Filter by UPC.

        Returns:
            ComicDataWrapper: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += "/v1/public/events/{eventId}/comics"

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            "eventId": event_id
        })

        # Process optional query parameters
        _query_parameters = {
            "characters": characters,
            "collaborators": collaborators,
            "creators": creators,
            "dateDescriptor": date_descriptor,
            "dateRange": date_range,
            "diamondCode": diamond_code,
            "digitalId": digital_id,
            "ean": ean,
            "events": events,
            "format": format,
            "formatType": format_type,
            "hasDigitalIssue": has_digital_issue,
            "isbn": isbn,
            "issn": issn,
            "issueNumber": issue_number,
            "limit": limit,
            "modifiedSince": modified_since,
            "noVariants": no_variants,
            "offset": offset,
            "orderBy": order_by,
            "series": series,
            "sharedAppearances": shared_appearances,
            "startYear": start_year,
            "stories": stories,
            "title": title,
            "titleStartsWith": title_starts_with,
            "upc": upc,
            "apikey": Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "referer": Configuration.referer
        }

        # Prepare the API call.
        _http_request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_http_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_http_request)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_response)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 409:
            raise APIException("Limit greater than 100.", 409, _response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(_response)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, ComicDataWrapper.from_dictionary)



    def get_comics_collection_by_series_id(self,
                                           series_id,
                                           characters = None,
                                           collaborators = None,
                                           creators = None,
                                           date_descriptor = None,
                                           date_range = None,
                                           diamond_code = None,
                                           digital_id = None,
                                           ean = None,
                                           events = None,
                                           format = "comic",
                                           format_type = None,
                                           has_digital_issue = "true",
                                           isbn = None,
                                           issn = None,
                                           issue_number = None,
                                           limit = None,
                                           modified_since = None,
                                           no_variants = "true",
                                           offset = None,
                                           order_by = "focDate",
                                           shared_appearances = None,
                                           start_year = None,
                                           stories = None,
                                           title = None,
                                           title_starts_with = None,
                                           upc = None):
        """Does a GET request to /v1/public/series/{seriesId}/comics.

        Fetches lists of comics filtered by a series id.

        Args:
            series_id (string): The series ID.
            characters (string, optional): Return only comics which feature
                the specified characters (accepts a comma-separated list of
                ids).
            collaborators (string, optional): Return only comics in which the
                specified creators worked together (for example in which BOTH
                Stan Lee and Jack Kirby did work).
            creators (string, optional): Return only comics which feature work
                by the specified creators (accepts a comma-separated list of
                ids).
            date_descriptor (DateDescriptorEnum, optional): Return comics
                within a predefined date range.
            date_range (string, optional): Return comics within a predefined
                date range.  Dates must be specified as date1,date2 (e.g.
                2013-01-01,2013-01-02).  Dates are preferably formatted as
                YYYY-MM-DD but may be sent as any common date format.
            diamond_code (string, optional): Filter by diamond code.
            digital_id (string, optional): Filter by digital comic id.
            ean (string, optional): Filter by EAN.
            events (string, optional): Return only comics which take place in
                the specified events (accepts a comma-separated list of ids).
            format (string, optional): Filter by the issue format (e.g. comic,
                digital comic, hardcover). (Acceptable values are: "comic",
                "magazine", "trade paperback", "hardcover", "digest", "graphic
                novel", "digital comic", "infinite comic")
            format_type (FormatTypeEnum, optional): Filter by the issue format
                type (comic or collection).
            has_digital_issue (string, optional): Include only results which
                are available digitally. (Acceptable values are: "true")
            isbn (string, optional): Filter by ISBN.
            issn (string, optional): Filter by ISSN.
            issue_number (string, optional): Return only issues in series
                whose issue number matches the input.
            limit (string, optional): Limit the result set to the specified
                number of resources.
            modified_since (string, optional): Return only comics which have
                been modified since the specified date.
            no_variants (string, optional): Exclude variant comics from the
                result set. (Acceptable values are: "true")
            offset (string, optional): Skip the specified number of resources
                in the result set.
            order_by (string, optional): Order the result set by a field or
                fields. Add a "-" to the value sort in descending order.
                Multiple values are given priority in the order in which they
                are passed. (Acceptable values are: "focDate", "onsaleDate",
                "title", "issueNumber", "modified", "-focDate", "-onsaleDate",
                "-title", "-issueNumber", "-modified")
            shared_appearances (string, optional): Return only comics in which
                the specified characters appear together (for example in which
                BOTH Spider-Man and Wolverine appear).
            start_year (string, optional): Return only issues in series whose
                start year matches the input.
            stories (string, optional): Return only comics which contain the
                specified stories (accepts a comma-separated list of ids).
            title (string, optional): Return only issues in series whose title
                matches the input.
            title_starts_with (string, optional): Return only issues in series
                whose title starts with the input.
            upc (string, optional): Filter by UPC.

        Returns:
            ComicDataWrapper: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += "/v1/public/series/{seriesId}/comics"

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            "seriesId": series_id
        })

        # Process optional query parameters
        _query_parameters = {
            "characters": characters,
            "collaborators": collaborators,
            "creators": creators,
            "dateDescriptor": date_descriptor,
            "dateRange": date_range,
            "diamondCode": diamond_code,
            "digitalId": digital_id,
            "ean": ean,
            "events": events,
            "format": format,
            "formatType": format_type,
            "hasDigitalIssue": has_digital_issue,
            "isbn": isbn,
            "issn": issn,
            "issueNumber": issue_number,
            "limit": limit,
            "modifiedSince": modified_since,
            "noVariants": no_variants,
            "offset": offset,
            "orderBy": order_by,
            "sharedAppearances": shared_appearances,
            "startYear": start_year,
            "stories": stories,
            "title": title,
            "titleStartsWith": title_starts_with,
            "upc": upc,
            "apikey": Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "referer": Configuration.referer
        }

        # Prepare the API call.
        _http_request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_http_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_http_request)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_response)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 409:
            raise APIException("Limit greater than 100.", 409, _response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(_response)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, ComicDataWrapper.from_dictionary)



    def get_comics_collection_by_story_id(self,
                                          story_id,
                                          characters = None,
                                          collaborators = None,
                                          creators = None,
                                          date_descriptor = None,
                                          date_range = None,
                                          diamond_code = None,
                                          digital_id = None,
                                          ean = None,
                                          events = None,
                                          format = "comic",
                                          format_type = None,
                                          has_digital_issue = "true",
                                          isbn = None,
                                          issn = None,
                                          issue_number = None,
                                          limit = None,
                                          modified_since = None,
                                          no_variants = "true",
                                          offset = None,
                                          order_by = "focDate",
                                          series = None,
                                          shared_appearances = None,
                                          start_year = None,
                                          title = None,
                                          title_starts_with = None,
                                          upc = None):
        """Does a GET request to /v1/public/stories/{storyId}/comics.

        Fetches lists of comics filtered by a story id.

        Args:
            story_id (string): The story ID.
            characters (string, optional): Return only comics which feature
                the specified characters (accepts a comma-separated list of
                ids).
            collaborators (string, optional): Return only comics in which the
                specified creators worked together (for example in which BOTH
                Stan Lee and Jack Kirby did work).
            creators (string, optional): Return only comics which feature work
                by the specified creators (accepts a comma-separated list of
                ids).
            date_descriptor (DateDescriptorEnum, optional): Return comics
                within a predefined date range.
            date_range (string, optional): Return comics within a predefined
                date range.  Dates must be specified as date1,date2 (e.g.
                2013-01-01,2013-01-02).  Dates are preferably formatted as
                YYYY-MM-DD but may be sent as any common date format.
            diamond_code (string, optional): Filter by diamond code.
            digital_id (string, optional): Filter by digital comic id.
            ean (string, optional): Filter by EAN.
            events (string, optional): Return only comics which take place in
                the specified events (accepts a comma-separated list of ids).
            format (string, optional): Filter by the issue format (e.g. comic,
                digital comic, hardcover). (Acceptable values are: "comic",
                "magazine", "trade paperback", "hardcover", "digest", "graphic
                novel", "digital comic", "infinite comic")
            format_type (FormatTypeEnum, optional): Filter by the issue format
                type (comic or collection).
            has_digital_issue (string, optional): Include only results which
                are available digitally. (Acceptable values are: "true")
            isbn (string, optional): Filter by ISBN.
            issn (string, optional): Filter by ISSN.
            issue_number (string, optional): Return only issues in series
                whose issue number matches the input.
            limit (string, optional): Limit the result set to the specified
                number of resources.
            modified_since (string, optional): Return only comics which have
                been modified since the specified date.
            no_variants (string, optional): Exclude variant comics from the
                result set. (Acceptable values are: "true")
            offset (string, optional): Skip the specified number of resources
                in the result set.
            order_by (string, optional): Order the result set by a field or
                fields. Add a "-" to the value sort in descending order.
                Multiple values are given priority in the order in which they
                are passed. (Acceptable values are: "focDate", "onsaleDate",
                "title", "issueNumber", "modified", "-focDate", "-onsaleDate",
                "-title", "-issueNumber", "-modified")
            series (string, optional): Return only comics which are part of
                the specified series (accepts a comma-separated list of ids).
            shared_appearances (string, optional): Return only comics in which
                the specified characters appear together (for example in which
                BOTH Spider-Man and Wolverine appear).
            start_year (string, optional): Return only issues in series whose
                start year matches the input.
            title (string, optional): Return only issues in series whose title
                matches the input.
            title_starts_with (string, optional): Return only issues in series
                whose title starts with the input.
            upc (string, optional): Filter by UPC.

        Returns:
            ComicDataWrapper: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += "/v1/public/stories/{storyId}/comics"

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            "storyId": story_id
        })

        # Process optional query parameters
        _query_parameters = {
            "characters": characters,
            "collaborators": collaborators,
            "creators": creators,
            "dateDescriptor": date_descriptor,
            "dateRange": date_range,
            "diamondCode": diamond_code,
            "digitalId": digital_id,
            "ean": ean,
            "events": events,
            "format": format,
            "formatType": format_type,
            "hasDigitalIssue": has_digital_issue,
            "isbn": isbn,
            "issn": issn,
            "issueNumber": issue_number,
            "limit": limit,
            "modifiedSince": modified_since,
            "noVariants": no_variants,
            "offset": offset,
            "orderBy": order_by,
            "series": series,
            "sharedAppearances": shared_appearances,
            "startYear": start_year,
            "title": title,
            "titleStartsWith": title_starts_with,
            "upc": upc,
            "apikey": Configuration.apikey
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "referer": Configuration.referer
        }

        # Prepare the API call.
        _http_request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_http_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_http_request)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_response)

        # Endpoint error handling using HTTP status codes.
        if _response.status_code == 409:
            raise APIException("Limit greater than 100.", 409, _response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(_response)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body, ComicDataWrapper.from_dictionary)


