# -*- coding: utf-8 -*-

"""
    marvelcomicslib.models.creator_data_container
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 07/21/2016
"""

from marvelcomicslib.models.base_model import BaseModel
from marvelcomicslib.models.creator import Creator

class CreatorDataContainer(BaseModel):

    """Implementation of the 'CreatorDataContainer' model.

    TODO: type model description here.

    Attributes:
        count (int): The total number of results returned by this call.
        limit (int): The requested result limit.
        offset (int): The requested offset (number of skipped results) of the
            call.
        results (list of Creator): The list of creators returned by the call.
        total (int): The total number of resources available given the current
            filter set.

    """

    def __init__(self, 
                 count = None,
                 limit = None,
                 offset = None,
                 results = None,
                 total = None):
        """Constructor for the CreatorDataContainer class"""
        
        # Initialize members of the class
        self.count = count
        self.limit = limit
        self.offset = offset
        self.results = results
        self.total = total

        # Create a mapping from Model property names to API property names
        self.names = {
            "count": "count",
            "limit": "limit",
            "offset": "offset",
            "results": "results",
            "total": "total",
        }

    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """

        if dictionary == None:
            return None
        else:	
            # Extract variables from the dictionary
            count = dictionary.get("count")
            limit = dictionary.get("limit")
            offset = dictionary.get("offset")
            results = None
            if dictionary.get("results") != None:
                results = list()
                for structure in dictionary.get("results"):
                    results.append(Creator.from_dictionary(structure))
            total = dictionary.get("total")
            # Return an object of this model
            return cls(count,
                       limit,
                       offset,
                       results,
                       total)
