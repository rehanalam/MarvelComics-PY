# -*- coding: utf-8 -*-

"""
    marvelcomicslib.models.story_list
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 07/21/2016
"""

from marvelcomicslib.models.base_model import BaseModel
from marvelcomicslib.models.story_summary import StorySummary

class StoryList(BaseModel):

    """Implementation of the 'StoryList' model.

    TODO: type model description here.

    Attributes:
        available (int): The number of total available stories in this list.
            Will always be greater than or equal to the "returned" value.
        collection_uri (string): The path to the full list of stories in this
            collection.
        items (list of StorySummary): The list of returned stories in this
            collection.
        returned (int): The number of stories returned in this collection (up
            to 20).

    """

    def __init__(self, 
                 available = None,
                 collection_uri = None,
                 items = None,
                 returned = None):
        """Constructor for the StoryList class"""
        
        # Initialize members of the class
        self.available = available
        self.collection_uri = collection_uri
        self.items = items
        self.returned = returned

        # Create a mapping from Model property names to API property names
        self.names = {
            "available": "available",
            "collection_uri": "collectionURI",
            "items": "items",
            "returned": "returned",
        }

    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """

        if dictionary == None:
            return None
        else:	
            # Extract variables from the dictionary
            available = dictionary.get("available")
            collection_uri = dictionary.get("collectionURI")
            items = None
            if dictionary.get("items") != None:
                items = list()
                for structure in dictionary.get("items"):
                    items.append(StorySummary.from_dictionary(structure))
            returned = dictionary.get("returned")
            # Return an object of this model
            return cls(available,
                       collection_uri,
                       items,
                       returned)
