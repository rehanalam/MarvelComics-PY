# -*- coding: utf-8 -*-

"""
    marvelcomicslib.models.story
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 07/21/2016
"""

import dateutil.parser
from marvelcomicslib.models.base_model import BaseModel
from marvelcomicslib.models.character_list import CharacterList
from marvelcomicslib.models.comic_list import ComicList
from marvelcomicslib.models.creator_list import CreatorList
from marvelcomicslib.models.event_list import EventList
from marvelcomicslib.models.comic_summary import ComicSummary
from marvelcomicslib.models.series_list import SeriesList
from marvelcomicslib.models.thumbnail import Thumbnail

class Story(BaseModel):

    """Implementation of the 'Story' model.

    TODO: type model description here.

    Attributes:
        characters (CharacterList): A resource list of characters which appear
            in this story.
        comics (ComicList): A resource list containing comics in which this
            story takes place.
        creators (CreatorList): A resource list of creators who worked on this
            story.
        description (string): A short description of the story.
        events (EventList): A resource list of the events in which this story
            appears.
        id (int): The unique ID of the story resource.
        modified (DateTime): The date the resource was most recently
            modified.
        originalissue (ComicSummary): A summary representation of the issue in
            which this story was originally published.
        resource_uri (string): The canonical URL identifier for this
            resource.
        series (SeriesList): A resource list containing series in which this
            story appears.
        thumbnail (Thumbnail): The representative image for this story.
        title (string): The story title.
        mtype (string): The story type e.g. interior story, cover, text
            story.

    """

    def __init__(self, 
                 characters = None,
                 comics = None,
                 creators = None,
                 description = None,
                 events = None,
                 id = None,
                 modified = None,
                 originalissue = None,
                 resource_uri = None,
                 series = None,
                 thumbnail = None,
                 title = None,
                 mtype = None):
        """Constructor for the Story class"""
        
        # Initialize members of the class
        self.characters = characters
        self.comics = comics
        self.creators = creators
        self.description = description
        self.events = events
        self.id = id
        self.modified = modified
        self.originalissue = originalissue
        self.resource_uri = resource_uri
        self.series = series
        self.thumbnail = thumbnail
        self.title = title
        self.mtype = mtype

        # Create a mapping from Model property names to API property names
        self.names = {
            "characters": "characters",
            "comics": "comics",
            "creators": "creators",
            "description": "description",
            "events": "events",
            "id": "id",
            "modified": "modified",
            "originalissue": "originalissue",
            "resource_uri": "resourceURI",
            "series": "series",
            "thumbnail": "thumbnail",
            "title": "title",
            "mtype": "type",
        }

    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """

        if dictionary == None:
            return None
        else:	
            # Extract variables from the dictionary
            characters = CharacterList.from_dictionary(dictionary.get("characters")) if dictionary.get("characters") else None
            comics = ComicList.from_dictionary(dictionary.get("comics")) if dictionary.get("comics") else None
            creators = CreatorList.from_dictionary(dictionary.get("creators")) if dictionary.get("creators") else None
            description = dictionary.get("description")
            events = EventList.from_dictionary(dictionary.get("events")) if dictionary.get("events") else None
            id = dictionary.get("id")
            modified = dateutil.parser.parse(dictionary.get("modified")) if dictionary.get("modified") else None
            originalissue = ComicSummary.from_dictionary(dictionary.get("originalissue")) if dictionary.get("originalissue") else None
            resource_uri = dictionary.get("resourceURI")
            series = SeriesList.from_dictionary(dictionary.get("series")) if dictionary.get("series") else None
            thumbnail = Thumbnail.from_dictionary(dictionary.get("thumbnail")) if dictionary.get("thumbnail") else None
            title = dictionary.get("title")
            mtype = dictionary.get("type")
            # Return an object of this model
            return cls(characters,
                       comics,
                       creators,
                       description,
                       events,
                       id,
                       modified,
                       originalissue,
                       resource_uri,
                       series,
                       thumbnail,
                       title,
                       mtype)
