# -*- coding: utf-8 -*-

"""
    marvelcomicslib.models.comic
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 07/21/2016
"""

import dateutil.parser
from marvelcomicslib.models.base_model import BaseModel
from marvelcomicslib.models.character_list import CharacterList
from marvelcomicslib.models.comic_summary import ComicSummary
from marvelcomicslib.models.creator_list import CreatorList
from marvelcomicslib.models.comic_date import ComicDate
from marvelcomicslib.models.event_list import EventList
from marvelcomicslib.models.image import Image
from marvelcomicslib.models.comic_price import ComicPrice
from marvelcomicslib.models.series_summary import SeriesSummary
from marvelcomicslib.models.story_list import StoryList
from marvelcomicslib.models.text_object import TextObject
from marvelcomicslib.models.thumbnail import Thumbnail
from marvelcomicslib.models.url_model import UrlModel

class Comic(BaseModel):

    """Implementation of the 'Comic' model.

    TODO: type model description here.

    Attributes:
        characters (CharacterList): A resource list containing the characters
            which appear in this comic.
        collected_issues (list of ComicSummary): A list of issues collected in
            this comic (will generally be empty for periodical formats such as
            "comic" or "magazine").
        collections (list of ComicSummary): A list of collections which
            include this comic (will generally be empty if the comic's format
            is a collection).
        creators (CreatorList): A resource list containing the creators
            associated with this comic.
        dates (list of ComicDate): A list of key dates for this comic.
        description (string): The preferred description of the comic.
        diamond_code (string): The Diamond code for the comic.
        digital_id (int): The ID of the digital comic representation of this
            comic. Will be 0 if the comic is not available digitally.
        ean (string): The EAN barcode for the comic.
        events (EventList): A resource list containing the events in which
            this comic appears.
        format (string): The publication format of the comic e.g. comic,
            hardcover, trade paperback.
        id (int): The unique ID of the comic resource.
        images (list of Image): A list of promotional images associated with
            this comic.
        isbn (string): The ISBN for the comic (generally only populated for
            collection formats).
        issn (string): The ISSN barcode for the comic.
        issue_number (int): The number of the issue in the series (will
            generally be 0 for collection formats).
        modified (DateTime): The date the resource was most recently
            modified.
        page_count (int): The number of story pages in the comic.
        prices (list of ComicPrice): A list of prices for this comic.
        resource_uri (string): The canonical URL identifier for this
            resource.
        series (SeriesSummary): A summary representation of the series to
            which this comic belongs.
        stories (StoryList): A resource list containing the stories which
            appear in this comic.
        text_objects (list of TextObject): A set of descriptive text blurbs
            for the comic.
        thumbnail (Thumbnail): The representative image for this comic.
        title (string): The canonical title of the comic.
        upc (string): The UPC barcode number for the comic (generally only
            populated for periodical formats).
        urls (list of UrlModel): A set of public web site URLs for the
            resource.
        variant_description (string): If the issue is a variant (e.g. an
            alternate cover, second printing, or directorâ€™s cut), a text
            description of the variant.
        variants (list of ComicSummary): A list of variant issues for this
            comic (includes the "original" issue if the current issue is a
            variant).

    """

    def __init__(self, 
                 characters = None,
                 collected_issues = None,
                 collections = None,
                 creators = None,
                 dates = None,
                 description = None,
                 diamond_code = None,
                 digital_id = None,
                 ean = None,
                 events = None,
                 format = None,
                 id = None,
                 images = None,
                 isbn = None,
                 issn = None,
                 issue_number = None,
                 modified = None,
                 page_count = None,
                 prices = None,
                 resource_uri = None,
                 series = None,
                 stories = None,
                 text_objects = None,
                 thumbnail = None,
                 title = None,
                 upc = None,
                 urls = None,
                 variant_description = None,
                 variants = None):
        """Constructor for the Comic class"""
        
        # Initialize members of the class
        self.characters = characters
        self.collected_issues = collected_issues
        self.collections = collections
        self.creators = creators
        self.dates = dates
        self.description = description
        self.diamond_code = diamond_code
        self.digital_id = digital_id
        self.ean = ean
        self.events = events
        self.format = format
        self.id = id
        self.images = images
        self.isbn = isbn
        self.issn = issn
        self.issue_number = issue_number
        self.modified = modified
        self.page_count = page_count
        self.prices = prices
        self.resource_uri = resource_uri
        self.series = series
        self.stories = stories
        self.text_objects = text_objects
        self.thumbnail = thumbnail
        self.title = title
        self.upc = upc
        self.urls = urls
        self.variant_description = variant_description
        self.variants = variants

        # Create a mapping from Model property names to API property names
        self.names = {
            "characters": "characters",
            "collected_issues": "collectedIssues",
            "collections": "collections",
            "creators": "creators",
            "dates": "dates",
            "description": "description",
            "diamond_code": "diamondCode",
            "digital_id": "digitalId",
            "ean": "ean",
            "events": "events",
            "format": "format",
            "id": "id",
            "images": "images",
            "isbn": "isbn",
            "issn": "issn",
            "issue_number": "issueNumber",
            "modified": "modified",
            "page_count": "pageCount",
            "prices": "prices",
            "resource_uri": "resourceURI",
            "series": "series",
            "stories": "stories",
            "text_objects": "textObjects",
            "thumbnail": "thumbnail",
            "title": "title",
            "upc": "upc",
            "urls": "urls",
            "variant_description": "variantDescription",
            "variants": "variants",
        }

    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """

        if dictionary == None:
            return None
        else:	
            # Extract variables from the dictionary
            characters = CharacterList.from_dictionary(dictionary.get("characters")) if dictionary.get("characters") else None
            collected_issues = None
            if dictionary.get("collectedIssues") != None:
                collected_issues = list()
                for structure in dictionary.get("collectedIssues"):
                    collected_issues.append(ComicSummary.from_dictionary(structure))
            collections = None
            if dictionary.get("collections") != None:
                collections = list()
                for structure in dictionary.get("collections"):
                    collections.append(ComicSummary.from_dictionary(structure))
            creators = CreatorList.from_dictionary(dictionary.get("creators")) if dictionary.get("creators") else None
            dates = None
            if dictionary.get("dates") != None:
                dates = list()
                for structure in dictionary.get("dates"):
                    dates.append(ComicDate.from_dictionary(structure))
            description = dictionary.get("description")
            diamond_code = dictionary.get("diamondCode")
            digital_id = dictionary.get("digitalId")
            ean = dictionary.get("ean")
            events = EventList.from_dictionary(dictionary.get("events")) if dictionary.get("events") else None
            format = dictionary.get("format")
            id = dictionary.get("id")
            images = None
            if dictionary.get("images") != None:
                images = list()
                for structure in dictionary.get("images"):
                    images.append(Image.from_dictionary(structure))
            isbn = dictionary.get("isbn")
            issn = dictionary.get("issn")
            issue_number = dictionary.get("issueNumber")
            modified = dateutil.parser.parse(dictionary.get("modified")) if dictionary.get("modified") else None
            page_count = dictionary.get("pageCount")
            prices = None
            if dictionary.get("prices") != None:
                prices = list()
                for structure in dictionary.get("prices"):
                    prices.append(ComicPrice.from_dictionary(structure))
            resource_uri = dictionary.get("resourceURI")
            series = SeriesSummary.from_dictionary(dictionary.get("series")) if dictionary.get("series") else None
            stories = StoryList.from_dictionary(dictionary.get("stories")) if dictionary.get("stories") else None
            text_objects = None
            if dictionary.get("textObjects") != None:
                text_objects = list()
                for structure in dictionary.get("textObjects"):
                    text_objects.append(TextObject.from_dictionary(structure))
            thumbnail = Thumbnail.from_dictionary(dictionary.get("thumbnail")) if dictionary.get("thumbnail") else None
            title = dictionary.get("title")
            upc = dictionary.get("upc")
            urls = None
            if dictionary.get("urls") != None:
                urls = list()
                for structure in dictionary.get("urls"):
                    urls.append(UrlModel.from_dictionary(structure))
            variant_description = dictionary.get("variantDescription")
            variants = None
            if dictionary.get("variants") != None:
                variants = list()
                for structure in dictionary.get("variants"):
                    variants.append(ComicSummary.from_dictionary(structure))
            # Return an object of this model
            return cls(characters,
                       collected_issues,
                       collections,
                       creators,
                       dates,
                       description,
                       diamond_code,
                       digital_id,
                       ean,
                       events,
                       format,
                       id,
                       images,
                       isbn,
                       issn,
                       issue_number,
                       modified,
                       page_count,
                       prices,
                       resource_uri,
                       series,
                       stories,
                       text_objects,
                       thumbnail,
                       title,
                       upc,
                       urls,
                       variant_description,
                       variants)
