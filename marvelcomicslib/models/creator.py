# -*- coding: utf-8 -*-

"""
    marvelcomicslib.models.creator
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 07/21/2016
"""

import dateutil.parser
from marvelcomicslib.models.base_model import BaseModel
from marvelcomicslib.models.comic_list import ComicList
from marvelcomicslib.models.event_list import EventList
from marvelcomicslib.models.series_list import SeriesList
from marvelcomicslib.models.story_list import StoryList
from marvelcomicslib.models.thumbnail import Thumbnail
from marvelcomicslib.models.url_model import UrlModel

class Creator(BaseModel):

    """Implementation of the 'Creator' model.

    TODO: type model description here.

    Attributes:
        comics (ComicList): A resource list containing the comics which
            feature work by this creator.
        events (EventList): A resource list containing the events which
            feature work by this creator.
        first_name (string): The first name of the creator.
        full_name (string): The full name of the creator (a space-separated
            concatenation of the above four fields).
        id (int): The unique ID of the creator resource.
        last_name (string): The last name of the creator.
        middle_name (string): The middle name of the creator.
        modified (DateTime): The date the resource was most recently
            modified.
        resource_uri (string): The canonical URL identifier for this
            resource.
        series (SeriesList): A resource list containing the series which
            feature work by this creator.
        stories (StoryList): A resource list containing the stories which
            feature work by this creator.
        suffix (string): The suffix or honorific for the creator.
        thumbnail (Thumbnail): The representative image for this creator.
        urls (list of UrlModel): A set of public web site URLs for the
            resource.

    """

    def __init__(self, 
                 comics = None,
                 events = None,
                 first_name = None,
                 full_name = None,
                 id = None,
                 last_name = None,
                 middle_name = None,
                 modified = None,
                 resource_uri = None,
                 series = None,
                 stories = None,
                 suffix = None,
                 thumbnail = None,
                 urls = None):
        """Constructor for the Creator class"""
        
        # Initialize members of the class
        self.comics = comics
        self.events = events
        self.first_name = first_name
        self.full_name = full_name
        self.id = id
        self.last_name = last_name
        self.middle_name = middle_name
        self.modified = modified
        self.resource_uri = resource_uri
        self.series = series
        self.stories = stories
        self.suffix = suffix
        self.thumbnail = thumbnail
        self.urls = urls

        # Create a mapping from Model property names to API property names
        self.names = {
            "comics": "comics",
            "events": "events",
            "first_name": "firstName",
            "full_name": "fullName",
            "id": "id",
            "last_name": "lastName",
            "middle_name": "middleName",
            "modified": "modified",
            "resource_uri": "resourceURI",
            "series": "series",
            "stories": "stories",
            "suffix": "suffix",
            "thumbnail": "thumbnail",
            "urls": "urls",
        }

    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """

        if dictionary == None:
            return None
        else:	
            # Extract variables from the dictionary
            comics = ComicList.from_dictionary(dictionary.get("comics")) if dictionary.get("comics") else None
            events = EventList.from_dictionary(dictionary.get("events")) if dictionary.get("events") else None
            first_name = dictionary.get("firstName")
            full_name = dictionary.get("fullName")
            id = dictionary.get("id")
            last_name = dictionary.get("lastName")
            middle_name = dictionary.get("middleName")
            modified = dateutil.parser.parse(dictionary.get("modified")) if dictionary.get("modified") else None
            resource_uri = dictionary.get("resourceURI")
            series = SeriesList.from_dictionary(dictionary.get("series")) if dictionary.get("series") else None
            stories = StoryList.from_dictionary(dictionary.get("stories")) if dictionary.get("stories") else None
            suffix = dictionary.get("suffix")
            thumbnail = Thumbnail.from_dictionary(dictionary.get("thumbnail")) if dictionary.get("thumbnail") else None
            urls = None
            if dictionary.get("urls") != None:
                urls = list()
                for structure in dictionary.get("urls"):
                    urls.append(UrlModel.from_dictionary(structure))
            # Return an object of this model
            return cls(comics,
                       events,
                       first_name,
                       full_name,
                       id,
                       last_name,
                       middle_name,
                       modified,
                       resource_uri,
                       series,
                       stories,
                       suffix,
                       thumbnail,
                       urls)
