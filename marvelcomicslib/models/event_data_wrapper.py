# -*- coding: utf-8 -*-

"""
    marvelcomicslib.models.event_data_wrapper
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 07/21/2016
"""

from marvelcomicslib.models.base_model import BaseModel
from marvelcomicslib.models.event_data_container import EventDataContainer

class EventDataWrapper(BaseModel):

    """Implementation of the 'EventDataWrapper' model.

    TODO: type model description here.

    Attributes:
        attribution_html (string): An HTML representation of the attribution
            notice for this result.  Please display either this notice or the
            contents of the attributionText field on all screens which contain
            data from the Marvel Comics API.
        attribution_text (string): The attribution notice for this result. 
            Please display either this notice or the contents of the
            attributionHTML field on all screens which contain data from the
            Marvel Comics API.
        code (int): The HTTP status code of the returned result.
        copyright (string): The copyright notice for the returned result.
        data (EventDataContainer): The results returned by the call.
        etag (string): A digest value of the content returned by the call.
        status (string): A string description of the call status.

    """

    def __init__(self, 
                 attribution_html = None,
                 attribution_text = None,
                 code = None,
                 copyright = None,
                 data = None,
                 etag = None,
                 status = None):
        """Constructor for the EventDataWrapper class"""
        
        # Initialize members of the class
        self.attribution_html = attribution_html
        self.attribution_text = attribution_text
        self.code = code
        self.copyright = copyright
        self.data = data
        self.etag = etag
        self.status = status

        # Create a mapping from Model property names to API property names
        self.names = {
            "attribution_html": "attributionHTML",
            "attribution_text": "attributionText",
            "code": "code",
            "copyright": "copyright",
            "data": "data",
            "etag": "etag",
            "status": "status",
        }

    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """

        if dictionary == None:
            return None
        else:	
            # Extract variables from the dictionary
            attribution_html = dictionary.get("attributionHTML")
            attribution_text = dictionary.get("attributionText")
            code = dictionary.get("code")
            copyright = dictionary.get("copyright")
            data = EventDataContainer.from_dictionary(dictionary.get("data")) if dictionary.get("data") else None
            etag = dictionary.get("etag")
            status = dictionary.get("status")
            # Return an object of this model
            return cls(attribution_html,
                       attribution_text,
                       code,
                       copyright,
                       data,
                       etag,
                       status)
